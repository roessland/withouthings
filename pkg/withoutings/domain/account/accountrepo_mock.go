// Code generated by mockery v2.20.0. DO NOT EDIT.

package account

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockRepo is an autogenerated mock type for the Repo type
type MockRepo struct {
	mock.Mock
}

type MockRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepo) EXPECT() *MockRepo_Expecter {
	return &MockRepo_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: ctx, account
func (_m *MockRepo) CreateAccount(ctx context.Context, account *Account) error {
	ret := _m.Called(ctx, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Account) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockRepo_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account *Account
func (_e *MockRepo_Expecter) CreateAccount(ctx interface{}, account interface{}) *MockRepo_CreateAccount_Call {
	return &MockRepo_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, account)}
}

func (_c *MockRepo_CreateAccount_Call) Run(run func(ctx context.Context, account *Account)) *MockRepo_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Account))
	})
	return _c
}

func (_c *MockRepo_CreateAccount_Call) Return(_a0 error) *MockRepo_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepo_CreateAccount_Call) RunAndReturn(run func(context.Context, *Account) error) *MockRepo_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByUUID provides a mock function with given fields: ctx, accountUUID
func (_m *MockRepo) GetAccountByUUID(ctx context.Context, accountUUID uuid.UUID) (*Account, error) {
	ret := _m.Called(ctx, accountUUID)

	var r0 *Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Account, error)); ok {
		return rf(ctx, accountUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Account); ok {
		r0 = rf(ctx, accountUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, accountUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_GetAccountByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByUUID'
type MockRepo_GetAccountByUUID_Call struct {
	*mock.Call
}

// GetAccountByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - accountUUID uuid.UUID
func (_e *MockRepo_Expecter) GetAccountByUUID(ctx interface{}, accountUUID interface{}) *MockRepo_GetAccountByUUID_Call {
	return &MockRepo_GetAccountByUUID_Call{Call: _e.mock.On("GetAccountByUUID", ctx, accountUUID)}
}

func (_c *MockRepo_GetAccountByUUID_Call) Run(run func(ctx context.Context, accountUUID uuid.UUID)) *MockRepo_GetAccountByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepo_GetAccountByUUID_Call) Return(_a0 *Account, _a1 error) *MockRepo_GetAccountByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_GetAccountByUUID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Account, error)) *MockRepo_GetAccountByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByWithingsUserID provides a mock function with given fields: ctx, withingsUserID
func (_m *MockRepo) GetAccountByWithingsUserID(ctx context.Context, withingsUserID string) (*Account, error) {
	ret := _m.Called(ctx, withingsUserID)

	var r0 *Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Account, error)); ok {
		return rf(ctx, withingsUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Account); ok {
		r0 = rf(ctx, withingsUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, withingsUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_GetAccountByWithingsUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByWithingsUserID'
type MockRepo_GetAccountByWithingsUserID_Call struct {
	*mock.Call
}

// GetAccountByWithingsUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - withingsUserID string
func (_e *MockRepo_Expecter) GetAccountByWithingsUserID(ctx interface{}, withingsUserID interface{}) *MockRepo_GetAccountByWithingsUserID_Call {
	return &MockRepo_GetAccountByWithingsUserID_Call{Call: _e.mock.On("GetAccountByWithingsUserID", ctx, withingsUserID)}
}

func (_c *MockRepo_GetAccountByWithingsUserID_Call) Run(run func(ctx context.Context, withingsUserID string)) *MockRepo_GetAccountByWithingsUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepo_GetAccountByWithingsUserID_Call) Return(_a0 *Account, _a1 error) *MockRepo_GetAccountByWithingsUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_GetAccountByWithingsUserID_Call) RunAndReturn(run func(context.Context, string) (*Account, error)) *MockRepo_GetAccountByWithingsUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccounts provides a mock function with given fields: ctx
func (_m *MockRepo) ListAccounts(ctx context.Context) ([]*Account, error) {
	ret := _m.Called(ctx)

	var r0 []*Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Account, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type MockRepo_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepo_Expecter) ListAccounts(ctx interface{}) *MockRepo_ListAccounts_Call {
	return &MockRepo_ListAccounts_Call{Call: _e.mock.On("ListAccounts", ctx)}
}

func (_c *MockRepo_ListAccounts_Call) Run(run func(ctx context.Context)) *MockRepo_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepo_ListAccounts_Call) Return(_a0 []*Account, _a1 error) *MockRepo_ListAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_ListAccounts_Call) RunAndReturn(run func(context.Context) ([]*Account, error)) *MockRepo_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, accountUUID, updateFn
func (_m *MockRepo) Update(ctx context.Context, accountUUID uuid.UUID, updateFn func(context.Context, *Account) (*Account, error)) error {
	ret := _m.Called(ctx, accountUUID, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, func(context.Context, *Account) (*Account, error)) error); ok {
		r0 = rf(ctx, accountUUID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - accountUUID uuid.UUID
//   - updateFn func(context.Context , *Account)(*Account , error)
func (_e *MockRepo_Expecter) Update(ctx interface{}, accountUUID interface{}, updateFn interface{}) *MockRepo_Update_Call {
	return &MockRepo_Update_Call{Call: _e.mock.On("Update", ctx, accountUUID, updateFn)}
}

func (_c *MockRepo_Update_Call) Run(run func(ctx context.Context, accountUUID uuid.UUID, updateFn func(context.Context, *Account) (*Account, error))) *MockRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(func(context.Context, *Account) (*Account, error)))
	})
	return _c
}

func (_c *MockRepo_Update_Call) Return(_a0 error) *MockRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepo_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, func(context.Context, *Account) (*Account, error)) error) *MockRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepo creates a new instance of MockRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepo(t mockConstructorTestingTNewMockRepo) *MockRepo {
	mock := &MockRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
