package subscription

import (
	"github.com/google/uuid"
	"time"
)

type Subscription struct {
	subscriptionUUID    uuid.UUID
	accountUUID         uuid.UUID
	appli               int
	callbackURL         string
	comment             string
	webhookSecret       string
	status              Status
	statusLastCheckedAt time.Time
}

type Status string

const StatusPending Status = "pending"
const StatusActive Status = "active"
const StatusRevoked Status = "revoked"
const StatusUserDeleted Status = "user-deleted"

// NewSubscription returns a new subscription.
// TODO should return (sub, error)
func NewSubscription(
	subscriptionUUID uuid.UUID,
	accountUUID uuid.UUID,
	appli int,
	callbackURL string,
	comment string,
	webhookSecret string,
	status Status,
) *Subscription {
	return &Subscription{
		subscriptionUUID: subscriptionUUID,
		accountUUID:      accountUUID,
		appli:            appli,
		callbackURL:      callbackURL,
		comment:          comment,
		webhookSecret:    webhookSecret,
		status:           status,
	}
}

// UUID is a unique identifier for the subscription, generated by us.
func (s *Subscription) UUID() uuid.UUID {
	return s.subscriptionUUID
}

// AccountUUID is the UUID of the account that created the subscription.
func (s *Subscription) AccountUUID() uuid.UUID {
	return s.accountUUID
}

// Appli is the subscription cateogry. 1 = activity, 4 = sleep, 16 = weight, etc.
func (s *Subscription) Appli() int {
	return s.appli
}

// CallbackURL returns the URL that Withings will send the webhook to.
// It is stored per subscription to enable gradual migration to a new URL.
func (s *Subscription) CallbackURL() string {
	return s.callbackURL
}

// Comment returns the comment used when creating the subscription.
// It has no functional purpose.
func (s *Subscription) Comment() string {
	return s.comment
}

// WebhookSecret returns the secret that is used to verify that the webhook request is from Withings.
// It is stored per subscription to enable gradual migration to a new secret.
func (s *Subscription) WebhookSecret() string {
	return s.webhookSecret
}

// Status returns the status of the subscription. It may be out of sync with Withings API.
func (s *Subscription) Status() Status {
	return s.status
}

// StatusLastCheckedAt returns the time when the status was last checked with the Withings API.
func (s *Subscription) StatusLastCheckedAt() time.Time {
	return s.statusLastCheckedAt
}

// StatusShouldBeChecked returns true if the status should be checked with Withings API
// to see if the subscription is still active.
func (s *Subscription) StatusShouldBeChecked() bool {
	return time.Since(s.statusLastCheckedAt) > 24*time.Hour
}

// MarkAsCheckedAndActive marks the subscription as checked and active.
// It should be called after verifying with Withings API that the subscription is still.
func (s *Subscription) MarkAsCheckedAndActive() {
	s.statusLastCheckedAt = time.Now()
	s.status = StatusActive
}

func (s *Subscription) MarkAsRevoked() {
	s.statusLastCheckedAt = time.Now()
	s.status = StatusRevoked
}
