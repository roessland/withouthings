// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: account.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO account (account_uuid, withings_user_id, withings_access_token, withings_refresh_token,
                     withings_access_token_expiry, withings_scopes)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateAccountParams struct {
	AccountUuid               uuid.UUID
	WithingsUserID            string
	WithingsAccessToken       string
	WithingsRefreshToken      string
	WithingsAccessTokenExpiry time.Time
	WithingsScopes            string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount,
		arg.AccountUuid,
		arg.WithingsUserID,
		arg.WithingsAccessToken,
		arg.WithingsRefreshToken,
		arg.WithingsAccessTokenExpiry,
		arg.WithingsScopes,
	)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE
FROM account
WHERE withings_user_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, withingsUserID string) error {
	_, err := q.db.Exec(ctx, deleteAccount, withingsUserID)
	return err
}

const getAccountByAccountUUID = `-- name: GetAccountByAccountUUID :one
SELECT account_id, withings_user_id, withings_access_token, withings_refresh_token, withings_access_token_expiry, withings_scopes, account_uuid
FROM account
WHERE account_uuid = $1
LIMIT 1
`

func (q *Queries) GetAccountByAccountUUID(ctx context.Context, accountUuid uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByAccountUUID, accountUuid)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.WithingsUserID,
		&i.WithingsAccessToken,
		&i.WithingsRefreshToken,
		&i.WithingsAccessTokenExpiry,
		&i.WithingsScopes,
		&i.AccountUuid,
	)
	return i, err
}

const getAccountByWithingsUserID = `-- name: GetAccountByWithingsUserID :one
SELECT account_id, withings_user_id, withings_access_token, withings_refresh_token, withings_access_token_expiry, withings_scopes, account_uuid
FROM account
WHERE withings_user_id = $1
LIMIT 1
`

func (q *Queries) GetAccountByWithingsUserID(ctx context.Context, withingsUserID string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByWithingsUserID, withingsUserID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.WithingsUserID,
		&i.WithingsAccessToken,
		&i.WithingsRefreshToken,
		&i.WithingsAccessTokenExpiry,
		&i.WithingsScopes,
		&i.AccountUuid,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT account_id, withings_user_id, withings_access_token, withings_refresh_token, withings_access_token_expiry, withings_scopes, account_uuid
FROM account
ORDER BY account_id
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccountID,
			&i.WithingsUserID,
			&i.WithingsAccessToken,
			&i.WithingsRefreshToken,
			&i.WithingsAccessTokenExpiry,
			&i.WithingsScopes,
			&i.AccountUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE account
SET withings_access_token=$1,
    withings_refresh_token=$2,
    withings_access_token_expiry=$3,
    withings_scopes=$4
WHERE withings_user_id = $5
`

type UpdateAccountParams struct {
	WithingsAccessToken       string
	WithingsRefreshToken      string
	WithingsAccessTokenExpiry time.Time
	WithingsScopes            string
	WithingsUserID            string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount,
		arg.WithingsAccessToken,
		arg.WithingsRefreshToken,
		arg.WithingsAccessTokenExpiry,
		arg.WithingsScopes,
		arg.WithingsUserID,
	)
	return err
}
