// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: subscription.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const allNotificationCategories = `-- name: AllNotificationCategories :many
SELECT appli, scope, description
FROM notification_category
ORDER BY appli
`

func (q *Queries) AllNotificationCategories(ctx context.Context) ([]NotificationCategory, error) {
	rows, err := q.db.Query(ctx, allNotificationCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NotificationCategory
	for rows.Next() {
		var i NotificationCategory
		if err := rows.Scan(&i.Appli, &i.Scope, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createNotification = `-- name: CreateNotification :exec
INSERT INTO notification(notification_uuid,
                         account_uuid,
                         received_at,
                         params,
                         data_status,
                         fetched_at,
                         raw_notification_uuid,
                         source)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (notification_uuid) DO NOTHING
`

type CreateNotificationParams struct {
	NotificationUuid    uuid.UUID
	AccountUuid         uuid.UUID
	ReceivedAt          time.Time
	Params              string
	DataStatus          string
	FetchedAt           *time.Time
	RawNotificationUuid uuid.UUID
	Source              string
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) error {
	_, err := q.db.Exec(ctx, createNotification,
		arg.NotificationUuid,
		arg.AccountUuid,
		arg.ReceivedAt,
		arg.Params,
		arg.DataStatus,
		arg.FetchedAt,
		arg.RawNotificationUuid,
		arg.Source,
	)
	return err
}

const createNotificationData = `-- name: CreateNotificationData :exec
INSERT INTO notification_data(notification_data_uuid,
                              account_uuid,
                              notification_uuid,
                              service,
                              data,
                              fetched_at)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (notification_uuid, service) DO NOTHING
`

type CreateNotificationDataParams struct {
	NotificationDataUuid uuid.UUID
	AccountUuid          uuid.UUID
	NotificationUuid     uuid.UUID
	Service              string
	Data                 []byte
	FetchedAt            time.Time
}

func (q *Queries) CreateNotificationData(ctx context.Context, arg CreateNotificationDataParams) error {
	_, err := q.db.Exec(ctx, createNotificationData,
		arg.NotificationDataUuid,
		arg.AccountUuid,
		arg.NotificationUuid,
		arg.Service,
		arg.Data,
		arg.FetchedAt,
	)
	return err
}

const createRawNotification = `-- name: CreateRawNotification :exec
INSERT INTO raw_notification (raw_notification_uuid, source, status, data)
VALUES ($1, $2, $3, $4)
`

type CreateRawNotificationParams struct {
	RawNotificationUuid uuid.UUID
	Source              string
	Status              string
	Data                string
}

func (q *Queries) CreateRawNotification(ctx context.Context, arg CreateRawNotificationParams) error {
	_, err := q.db.Exec(ctx, createRawNotification,
		arg.RawNotificationUuid,
		arg.Source,
		arg.Status,
		arg.Data,
	)
	return err
}

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO subscription(subscription_uuid,
                         account_uuid,
                         appli,
                         callbackurl,
                         webhook_secret,
                         status,
                         comment,
                         status_last_checked_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateSubscriptionParams struct {
	SubscriptionUuid    uuid.UUID
	AccountUuid         uuid.UUID
	Appli               int32
	Callbackurl         string
	WebhookSecret       string
	Status              string
	Comment             string
	StatusLastCheckedAt time.Time
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.db.Exec(ctx, createSubscription,
		arg.SubscriptionUuid,
		arg.AccountUuid,
		arg.Appli,
		arg.Callbackurl,
		arg.WebhookSecret,
		arg.Status,
		arg.Comment,
		arg.StatusLastCheckedAt,
	)
	return err
}

const deleteRawNotification = `-- name: DeleteRawNotification :exec
DELETE
FROM raw_notification
WHERE raw_notification_uuid = $1
`

func (q *Queries) DeleteRawNotification(ctx context.Context, rawNotificationUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRawNotification, rawNotificationUuid)
	return err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE
FROM subscription
WHERE subscription_uuid = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, subscriptionUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubscription, subscriptionUuid)
	return err
}

const getNotificationByUUID = `-- name: GetNotificationByUUID :one
SELECT notification_uuid, account_uuid, received_at, params_json, fetched_at, raw_notification_uuid, source, params, data_status
FROM notification
WHERE notification_uuid = $1
`

func (q *Queries) GetNotificationByUUID(ctx context.Context, notificationUuid uuid.UUID) (Notification, error) {
	row := q.db.QueryRow(ctx, getNotificationByUUID, notificationUuid)
	var i Notification
	err := row.Scan(
		&i.NotificationUuid,
		&i.AccountUuid,
		&i.ReceivedAt,
		&i.ParamsJson,
		&i.FetchedAt,
		&i.RawNotificationUuid,
		&i.Source,
		&i.Params,
		&i.DataStatus,
	)
	return i, err
}

const getNotificationDataByNotificationUUID = `-- name: GetNotificationDataByNotificationUUID :many
SELECT notification_data_uuid, account_uuid, notification_uuid, service, data, fetched_at
FROM notification_data
WHERE notification_uuid = $1
`

func (q *Queries) GetNotificationDataByNotificationUUID(ctx context.Context, notificationUuid uuid.UUID) ([]NotificationDatum, error) {
	rows, err := q.db.Query(ctx, getNotificationDataByNotificationUUID, notificationUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NotificationDatum
	for rows.Next() {
		var i NotificationDatum
		if err := rows.Scan(
			&i.NotificationDataUuid,
			&i.AccountUuid,
			&i.NotificationUuid,
			&i.Service,
			&i.Data,
			&i.FetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsByAccountUUID = `-- name: GetNotificationsByAccountUUID :many
SELECT notification_uuid, account_uuid, received_at, params_json, fetched_at, raw_notification_uuid, source, params, data_status
FROM notification
WHERE account_uuid = $1
ORDER BY received_at DESC
`

func (q *Queries) GetNotificationsByAccountUUID(ctx context.Context, accountUuid uuid.UUID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByAccountUUID, accountUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.NotificationUuid,
			&i.AccountUuid,
			&i.ReceivedAt,
			&i.ParamsJson,
			&i.FetchedAt,
			&i.RawNotificationUuid,
			&i.Source,
			&i.Params,
			&i.DataStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingRawNotifications = `-- name: GetPendingRawNotifications :many
SELECT raw_notification_id, source, status, data, raw_notification_uuid, received_at, processed_at
FROM raw_notification
WHERE status = 'pending'
ORDER BY raw_notification_id
`

func (q *Queries) GetPendingRawNotifications(ctx context.Context) ([]RawNotification, error) {
	rows, err := q.db.Query(ctx, getPendingRawNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RawNotification
	for rows.Next() {
		var i RawNotification
		if err := rows.Scan(
			&i.RawNotificationID,
			&i.Source,
			&i.Status,
			&i.Data,
			&i.RawNotificationUuid,
			&i.ReceivedAt,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingSubscriptions = `-- name: GetPendingSubscriptions :many
SELECT subscription_id, appli, callbackurl, webhook_secret, status, comment, subscription_uuid, account_uuid, status_last_checked_at
FROM subscription
WHERE status = 'pending'
ORDER BY subscription.account_uuid
`

func (q *Queries) GetPendingSubscriptions(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.Query(ctx, getPendingSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.SubscriptionID,
			&i.Appli,
			&i.Callbackurl,
			&i.WebhookSecret,
			&i.Status,
			&i.Comment,
			&i.SubscriptionUuid,
			&i.AccountUuid,
			&i.StatusLastCheckedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRawNotification = `-- name: GetRawNotification :one
SELECT raw_notification_id, source, status, data, raw_notification_uuid, received_at, processed_at
FROM raw_notification
WHERE raw_notification_uuid = $1
`

func (q *Queries) GetRawNotification(ctx context.Context, rawNotificationUuid uuid.UUID) (RawNotification, error) {
	row := q.db.QueryRow(ctx, getRawNotification, rawNotificationUuid)
	var i RawNotification
	err := row.Scan(
		&i.RawNotificationID,
		&i.Source,
		&i.Status,
		&i.Data,
		&i.RawNotificationUuid,
		&i.ReceivedAt,
		&i.ProcessedAt,
	)
	return i, err
}

const getSubscriptionByAccountUUIDAndAppli = `-- name: GetSubscriptionByAccountUUIDAndAppli :one
SELECT subscription_id, appli, callbackurl, webhook_secret, status, comment, subscription_uuid, account_uuid, status_last_checked_at
FROM subscription
WHERE account_uuid = $1
  AND appli = $2
`

type GetSubscriptionByAccountUUIDAndAppliParams struct {
	AccountUuid uuid.UUID
	Appli       int32
}

func (q *Queries) GetSubscriptionByAccountUUIDAndAppli(ctx context.Context, arg GetSubscriptionByAccountUUIDAndAppliParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscriptionByAccountUUIDAndAppli, arg.AccountUuid, arg.Appli)
	var i Subscription
	err := row.Scan(
		&i.SubscriptionID,
		&i.Appli,
		&i.Callbackurl,
		&i.WebhookSecret,
		&i.Status,
		&i.Comment,
		&i.SubscriptionUuid,
		&i.AccountUuid,
		&i.StatusLastCheckedAt,
	)
	return i, err
}

const getSubscriptionByUUID = `-- name: GetSubscriptionByUUID :one
SELECT subscription_id, appli, callbackurl, webhook_secret, status, comment, subscription_uuid, account_uuid, status_last_checked_at
FROM subscription
WHERE subscription_uuid = $1
`

func (q *Queries) GetSubscriptionByUUID(ctx context.Context, subscriptionUuid uuid.UUID) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscriptionByUUID, subscriptionUuid)
	var i Subscription
	err := row.Scan(
		&i.SubscriptionID,
		&i.Appli,
		&i.Callbackurl,
		&i.WebhookSecret,
		&i.Status,
		&i.Comment,
		&i.SubscriptionUuid,
		&i.AccountUuid,
		&i.StatusLastCheckedAt,
	)
	return i, err
}

const getSubscriptionByWebhookSecret = `-- name: GetSubscriptionByWebhookSecret :one
SELECT subscription_id, appli, callbackurl, webhook_secret, status, comment, subscription_uuid, account_uuid, status_last_checked_at
FROM subscription
WHERE webhook_secret = $1
`

func (q *Queries) GetSubscriptionByWebhookSecret(ctx context.Context, webhookSecret string) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscriptionByWebhookSecret, webhookSecret)
	var i Subscription
	err := row.Scan(
		&i.SubscriptionID,
		&i.Appli,
		&i.Callbackurl,
		&i.WebhookSecret,
		&i.Status,
		&i.Comment,
		&i.SubscriptionUuid,
		&i.AccountUuid,
		&i.StatusLastCheckedAt,
	)
	return i, err
}

const getSubscriptionsByAccountUUID = `-- name: GetSubscriptionsByAccountUUID :many
SELECT subscription_id, appli, callbackurl, webhook_secret, status, comment, subscription_uuid, account_uuid, status_last_checked_at
FROM subscription
WHERE account_uuid = $1
ORDER BY appli
`

func (q *Queries) GetSubscriptionsByAccountUUID(ctx context.Context, accountUuid uuid.UUID) ([]Subscription, error) {
	rows, err := q.db.Query(ctx, getSubscriptionsByAccountUUID, accountUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.SubscriptionID,
			&i.Appli,
			&i.Callbackurl,
			&i.WebhookSecret,
			&i.Status,
			&i.Comment,
			&i.SubscriptionUuid,
			&i.AccountUuid,
			&i.StatusLastCheckedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT subscription_id, appli, callbackurl, webhook_secret, status, comment, subscription_uuid, account_uuid, status_last_checked_at
FROM subscription
ORDER BY account_uuid
`

func (q *Queries) ListSubscriptions(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.Query(ctx, listSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.SubscriptionID,
			&i.Appli,
			&i.Callbackurl,
			&i.WebhookSecret,
			&i.Status,
			&i.Comment,
			&i.SubscriptionUuid,
			&i.AccountUuid,
			&i.StatusLastCheckedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotification = `-- name: UpdateNotification :exec
UPDATE notification
SET account_uuid          = $1,
    received_at           = $2,
    params                = $3,
    data_status           = $4,
    fetched_at            = $5,
    raw_notification_uuid = $6,
    source                = $7
WHERE notification_uuid = $8
`

type UpdateNotificationParams struct {
	AccountUuid         uuid.UUID
	ReceivedAt          time.Time
	Params              string
	DataStatus          string
	FetchedAt           *time.Time
	RawNotificationUuid uuid.UUID
	Source              string
	NotificationUuid    uuid.UUID
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) error {
	_, err := q.db.Exec(ctx, updateNotification,
		arg.AccountUuid,
		arg.ReceivedAt,
		arg.Params,
		arg.DataStatus,
		arg.FetchedAt,
		arg.RawNotificationUuid,
		arg.Source,
		arg.NotificationUuid,
	)
	return err
}

const updateRawNotification = `-- name: UpdateRawNotification :exec
UPDATE raw_notification
SET source       = $1,
    status       = $2,
    data         = $3,
    received_at  = $4,
    processed_at = $5
WHERE raw_notification_uuid = $6
`

type UpdateRawNotificationParams struct {
	Source              string
	Status              string
	Data                string
	ReceivedAt          time.Time
	ProcessedAt         *time.Time
	RawNotificationUuid uuid.UUID
}

func (q *Queries) UpdateRawNotification(ctx context.Context, arg UpdateRawNotificationParams) error {
	_, err := q.db.Exec(ctx, updateRawNotification,
		arg.Source,
		arg.Status,
		arg.Data,
		arg.ReceivedAt,
		arg.ProcessedAt,
		arg.RawNotificationUuid,
	)
	return err
}

const updateSubscription = `-- name: UpdateSubscription :exec
UPDATE subscription
SET account_uuid           = $1,
    appli                  = $2,
    callbackurl            = $3,
    webhook_secret         = $4,
    status                 = $5,
    comment                = $6,
    status_last_checked_at = $7
WHERE subscription_uuid = $8
`

type UpdateSubscriptionParams struct {
	AccountUuid         uuid.UUID
	Appli               int32
	Callbackurl         string
	WebhookSecret       string
	Status              string
	Comment             string
	StatusLastCheckedAt time.Time
	SubscriptionUuid    uuid.UUID
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) error {
	_, err := q.db.Exec(ctx, updateSubscription,
		arg.AccountUuid,
		arg.Appli,
		arg.Callbackurl,
		arg.WebhookSecret,
		arg.Status,
		arg.Comment,
		arg.StatusLastCheckedAt,
		arg.SubscriptionUuid,
	)
	return err
}
